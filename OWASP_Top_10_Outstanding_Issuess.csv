CID,Checker,Category,Type,Impact,Severity,CVSS score,Event Description,Vulnerable line number,Defect remediation guidance,CWE,OWASP,FilePathname
41895,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",797,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41896,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",375,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41897,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",649,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41898,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",336,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41899,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",174,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41900,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",144,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41901,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",414,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41902,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",926,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41903,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",214,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41904,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",695,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41905,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",546,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41906,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",494,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41907,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",983,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41908,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",253,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41909,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",314,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
41910,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",456,,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
46038,HARDCODED_CREDENTIALS,Medium impact security,Use of hard-coded password,Medium,Unspecified,7.67,"""java.sql.DriverManager.getConnection(java.lang.String, java.lang.String, java.lang.String)"" uses the constant string as a password.",126,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,259,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/DatabaseUtilities.java
110674,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",63,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
110676,DEADCODE,Control flow issues,Logically dead code,Medium,Unspecified,0.0,"Execution cannot reach this statement: ""return failed().feedback(""i..."".",59,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,561,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge1/Assignment1.java
110677,FORWARD_NULL,Null pointer dereferences,Explicit null dereferenced,Medium,Unspecified,7.39,"Calling a method on null object ""nodes"".",76,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,476,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/client-side-filtering/src/main/java/org/owasp/webgoat/plugin/Salaries.java
110679,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",63,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
110680,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""preparedStatement"" going out of scope leaks the resource it refers to.",62,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
110683,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",82,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
110685,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",100,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
110686,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",55,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
110687,NULL_RETURNS,Null pointer dereferences,Dereference null return value,Medium,Unspecified,7.39,"Calling a method on null object ""errors.getFieldError(""matchingPassword"")"".",44,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,476,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/test/java/org/owasp/webgoat/users/UserValidatorTest.java
110689,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""preparedStatement"" going out of scope leaks the resource it refers to.",63,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
110690,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",85,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
110691,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",64,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
110692,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",92,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
110693,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""preparedStatement"" going out of scope leaks the resource it refers to.",41,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/SqlInjectionLesson12a.java
110695,NULL_RETURNS,Null pointer dereferences,Dereference null return value,Medium,Unspecified,7.39,"Calling a method on null object ""errors.getFieldError(""username"")"".",58,Passwords should be stored in a Properties file in a location that is inaccessible to unauthorized users.,476,,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/test/java/org/owasp/webgoat/users/UserValidatorTest.java
159131,SQLI,High impact security,SQL injection,High,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""username_login"" is tainted. Passing the tainted command to the SQL API ""java.sql.Connection.prepareStatement(java.lang.String)"" may allow an attacker to inject SQL.",49,"Perform the following to guard against SQL string injection attacks with JDBC prepared statements.
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"username_login"""")"".
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
159134,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.89,"Constructing a path or URI using the tainted value ""element"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",55,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge7/MD5.java
159135,CSRF,High impact security,Cross-site request forgery,High,Major,9.89,"""org.owasp.webgoat.plugin.challenge6.Assignment6.login"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",80,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
159136,SQLI,High impact security,SQL injection,High,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""password_login"" is tainted. Passing the tainted command to the SQL API ""java.sql.Connection.prepareStatement(java.lang.String)"" may allow an attacker to inject SQL.",49,"Perform one of the following to guard against SQL injection attacks.
* Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
159138,UNSAFE_REFLECTION,Low impact security,Unsafe reflection,Low,Unspecified,7.39,"A tainted value ""context.getDatabaseDriver()"" is passed to a reflection API. This may allow an attacker to bypass security checks, obtain unauthorized data, or execute arbitrary code.",107,"Validate tainted data against a limited set of static, trusted reflection classes, methods, or fields. Reflect on one of these known values.",470,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/DatabaseUtilities.java
159140,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.89,"Constructing a path or URI using the tainted value ""webGoatHomeDirectory"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",65,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/BlindSendFileAssignment.java
159141,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.challenge5.challenge6.Assignment5.login"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",38,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
159145,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.89,"Constructing a path or URI using the tainted value ""webGoatHomeDirectory"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",53,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/client-side-filtering/src/main/java/org/owasp/webgoat/plugin/Salaries.java
159148,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.Users.getUsers"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",26,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java
159149,UNSAFE_DESERIALIZATION,High impact security,Unsafe deserialization,High,Unspecified,6.3,"A tainted value ""payload"" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code.",86,"If possible, use pure data formats such as JSON or XML to serialize and deserialize untrusted data.  Otherwise, if you must use native serialization methods, check the integrity of the data (for example with HMAC) before deserializing it.",502,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/vulnerable-components/src/main/java/org/owasp/webgoat/plugin/VulnerableComponentsLesson.java
159158,XML_EXTERNAL_ENTITY,Medium impact security,Unrestricted document type definitions,Medium,Unspecified,0.0,"Passing the tainted value ""new java.io.StringReader(xml)"" to a weakly configured XML parser. An attacker-controlled DTD may include external entity URLs, and the resolution of external entities may expose sensitive data or result in unwanted server requests. Processing an attacker-controlled DTD may also result in an overwhelming number of entity expansions, causing denial of service.",70,"The recommended and strongest prevention against both external entity and entity expansion attacks is to disable DTD processing in the parser. A ""javax.xml.stream.XMLInputFactory"" instance ""xiFactory"" can be configured to disable DTD processing by calling ""xiFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false)"".",827,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/Comments.java
159159,SQLI,High impact security,SQL injection,High,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""accountName"" is tainted.",64,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"accountName"""")"".
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson5a.java
159161,INSECURE_RANDOM,Insecure random category,Cryptographically weak PRNG,Low,Unspecified,0.0,"The random value ""random.nextInt(a.length)"" was generated using a cryptographically insecure pseudo-random number generator.",25,"Use a cryptographically secure PRNG implementation such as ""java.security.SecureRandom"".",330,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge7/PasswordResetLink.java
159162,INSECURE_RANDOM,Insecure random category,Cryptographically weak PRNG,Low,Unspecified,0.0,"The random value ""random.nextInt(65536)"" was generated using a cryptographically insecure pseudo-random number generator.",48,"Use a cryptographically secure PRNG implementation such as ""java.security.SecureRandom"".",330,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/csrf/src/main/java/org/owasp/webgoat/plugin/CSRFGetFlag.java
159163,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.mitigation.SqlInjectionLesson12a.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",34,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/SqlInjectionLesson12a.java
159165,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.89,"Constructing a path or URI using the tainted value ""webGoatHomeDirectory"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",42,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/client-side-filtering/src/main/java/org/owasp/webgoat/plugin/Salaries.java
159167,SENSITIVE_DATA_LEAK,Medium impact security,Cleartext sensitive data in a database,Medium,Unspecified,6.0,"Leaking a password ""password_login"". Passing it to ""java.sql.Connection.prepareStatement"" either stores it to a database or suggests that it is stored in a database.",49,"Do one of the following before storing it:
* Encrypt the data.
* Use a cryptographic hash on the data.
",313,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
159252,RESOURCE_LEAK,Exceptional resource leaks,Resource leak on an exceptional path,Low,Unspecified,5.35,"Variable ""is"" going out of scope leaks the resource it refers to.",169,"Do one of the following before storing it:
* Encrypt the data.
* Use a cryptographic hash on the data.
",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge7/MD5.java
159255,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",54,"Do one of the following before storing it:
* Encrypt the data.
* Use a cryptographic hash on the data.
",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java
159256,RESOURCE_LEAK,Exceptional resource leaks,Resource leak on an exceptional path,Low,Unspecified,5.35,"Variable ""is"" going out of scope leaks the resource it refers to.",184,"Do one of the following before storing it:
* Encrypt the data.
* Use a cryptographic hash on the data.
",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge7/MD5.java
160721,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.InsecureDeserializationTask.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",56,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/insecure-deserialization/src/main/java/org/owasp/webgoat/plugin/InsecureDeserializationTask.java
160722,HARDCODED_CREDENTIALS,Medium impact security,Use of hard-coded cryptographic key,Medium,Unspecified,7.67,"""io.jsonwebtoken.JwtParser.setSigningKey(java.lang.String)"" uses the constant string as a cryptographic key.",71,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,321,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTRefreshEndpoint.java
160723,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""preparedStatement"" going out of scope leaks the resource it refers to.",53,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/Servers.java
160724,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.JWTSecretKeyEndpoint.login"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",33,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTSecretKeyEndpoint.java
160726,HARDCODED_CREDENTIALS,Medium impact security,Use of hard-coded cryptographic key,Medium,Unspecified,7.67,"""io.jsonwebtoken.JwtParser.setSigningKey(java.lang.String)"" uses the constant string as a cryptographic key.",91,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,321,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTRefreshEndpoint.java
160727,FORWARD_NULL,Null pointer dereferences,Explicit null dereferenced,Medium,Unspecified,7.39,"Calling a method on null object ""statement"".",106,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,476,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
160728,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.JWTRefreshEndpoint.checkout"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",69,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTRefreshEndpoint.java
160729,HARDCODED_CREDENTIALS,Medium impact security,Use of hard-coded cryptographic key,Medium,Unspecified,7.67,"""io.jsonwebtoken.JwtParser.setSigningKey(java.lang.String)"" uses the constant string as a cryptographic key.",142,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,321,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTVotesEndpoint.java
160731,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.advanced.SqlInjectionChallenge.USERS_TABLE_NAME"" is not a constant literal.",108,"Perform the following to guard against SQL table name injection attacks with JDBC.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
160732,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.LandingAssignment.click"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",29,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/webwolf-introduction/src/main/java/org/owasp/webgoat/plugin/LandingAssignment.java
160733,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CSRFLogin.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",26,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/csrf/src/main/java/org/owasp/webgoat/plugin/CSRFLogin.java
160734,HARDCODED_CREDENTIALS,Medium impact security,Use of hard-coded cryptographic key,Medium,Unspecified,7.67,"""io.jsonwebtoken.JwtParser.setSigningKey(java.lang.String)"" uses the constant string as a cryptographic key.",120,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,321,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTVotesEndpoint.java
160736,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.advanced.SqlInjectionLesson6b.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",55,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionLesson6b.java
160737,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.QuestionsAssignment.passwordReset"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",40,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/plugin/QuestionsAssignment.java
160738,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Failing to save or close resource created by ""new java.io.FileOutputStream(new java.io.File(targetDirectory, ""employees.xml""))"" leaks it.",46,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/client-side-filtering/src/main/java/org/owasp/webgoat/plugin/Salaries.java
160739,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.ClientSideFilteringAssignment.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",50,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/client-side-filtering/src/main/java/org/owasp/webgoat/plugin/ClientSideFilteringAssignment.java
160740,HARDCODED_CREDENTIALS,Medium impact security,Use of hard-coded cryptographic key,Medium,Unspecified,7.67,"""io.jsonwebtoken.JwtParser.setSigningKey(java.lang.String)"" uses the constant string as a cryptographic key.",97,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,321,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTVotesEndpoint.java
160741,SINGLETON_RACE,Concurrent data access violations,Thread unsafe modification in singleton,High,Unspecified,4.25,"In call to ""ws.setCurrentLesson((org.owasp.webgoat.lessons.AbstractLesson)lesson.get())"", ""this.ws"" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior.",86,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,543,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/controller/StartLesson.java
160742,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.challenge6.Assignment6.USERS_TABLE_NAME"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Connection.prepareStatement(java.lang.String)"" may allow an attacker to inject SQL.",84,"Perform the following to guard against SQL table name injection attacks with JDBC prepared statements.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
160743,CSRF,High impact security,Cross-site request forgery,High,Moderate,9.89,"""org.owasp.webwolf.user.RegistrationController.registration"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",36,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/user/RegistrationController.java
160744,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",134,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
160745,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.ForgedReviews.createNewReview"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",97,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/csrf/src/main/java/org/owasp/webgoat/plugin/ForgedReviews.java
160746,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.IDORLogin.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",68,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/idor/src/main/java/org/owasp/webgoat/plugin/IDORLogin.java
160747,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.StoredCrossSiteScriptingVerifier.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",52,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/StoredCrossSiteScriptingVerifier.java
160748,HARDCODED_CREDENTIALS,Medium impact security,Use of hard-coded cryptographic key,Medium,Unspecified,7.67,"""io.jsonwebtoken.JwtParser.setSigningKey(java.lang.String)"" uses the constant string as a cryptographic key.",35,Cryptographic keys should be stored in a Properties file in a location that is inaccessible to unauthorized users.,321,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTSecretKeyEndpoint.java
160749,SQLI,High impact security,SQL injection,High,Moderate,9.58,"Insecure concatenation of a SQL statement. The value ""username_reg"" is tainted.",50,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"username_reg"""")"".
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
160750,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CrossSiteScriptingLesson1.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",51,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/CrossSiteScriptingLesson1.java
160751,WEAK_PASSWORD_HASH,Medium impact security,Hashing a password with a weak hash function,Medium,Unspecified,9.58,"Hashing a password using a computationally cheap cryptographic hash function. An attacker can compute more hashes per second with a cheaper function than with a more expensive function; therefore, if such password hashes leak to an attacker, they can recover more passwords in less time.",71,"The recommended method of hashing sensitive password data is to generate a random sequence of bytes (a ""salt"") for each password to hash, hash the password and the salt with an adaptive hash function such as bcrypt, scrypt, and PBKDF2 (Password-Based Key Derivation Function 2), and then store the hash and the salt for subsequent password checks.",916,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/DisplayUser.java
160752,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.mitigation.Servers.sort"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",44,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/Servers.java
160753,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CSRFFeedback.flag"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",57,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/csrf/src/main/java/org/owasp/webgoat/plugin/CSRFFeedback.java
160754,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Major,9.89,"Constructing a path or URI using the tainted value ""myFile.getOriginalFilename()"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",47,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/FileServer.java
160755,SQLI,High impact security,SQL injection,High,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""accountName"" is tainted.",62,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"accountName"""")"".
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionLesson6a.java
160756,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.InsecureLoginTask.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",53,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/insecure-login/src/main/java/org/owasp/webgoat/plugin/InsecureLoginTask.java
160758,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.challenge6.Assignment6.USERS_TABLE_NAME"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Statement.execute(java.lang.String)"" may allow an attacker to inject SQL.",99,"Perform the following to guard against SQL table name injection attacks with JDBC.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
160759,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.MailAssignment.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",56,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/webwolf-introduction/src/main/java/org/owasp/webgoat/plugin/MailAssignment.java
160762,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.advanced.SqlInjectionChallenge.USERS_TABLE_NAME"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Statement.execute(java.lang.String)"" may allow an attacker to inject SQL.",84,"Perform the following to guard against SQL table name injection attacks with JDBC.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
160763,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CSRFConfirmFlag1.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",25,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/csrf/src/main/java/org/owasp/webgoat/plugin/CSRFConfirmFlag1.java
160764,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.advanced.SqlInjectionLesson6a.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",53,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionLesson6a.java
160765,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.BypassRestrictionsFrontendValidation.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",53,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/bypass-restrictions/src/main/java/org/owasp/webgoat/plugin/BypassRestrictionsFrontendValidation.java
160766,CSRF,High impact security,Cross-site request forgery,High,Moderate,9.89,"""org.owasp.webgoat.users.RegistrationController.registration"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",36,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/users/RegistrationController.java
160767,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.ContentTypeAssignment.createNewUser"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",62,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/ContentTypeAssignment.java
160768,CSRF,High impact security,Cross-site request forgery,High,Moderate,9.89,"""org.owasp.webgoat.service.RestartLessonService.restartLesson"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",58,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/service/RestartLessonService.java
160769,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.HtmlTamperingTask.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",54,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/html-tampering/src/main/java/org/owasp/webgoat/plugin/HtmlTamperingTask.java
160770,SQLI,High impact security,SQL injection,High,Major,9.58,"Insecure concatenation of a SQL statement. The value ""column"" is tainted. Passing the tainted command to the SQL API ""java.sql.Connection.prepareStatement(java.lang.String)"" may allow an attacker to inject SQL.",46,"Perform the following to guard against SQL identifier injection attacks with JDBC prepared statements.
* Define constant string values for the identifiers.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/Servers.java
160771,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.IDORViewOwnProfileAltUrl.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",58,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/idor/src/main/java/org/owasp/webgoat/plugin/IDORViewOwnProfileAltUrl.java
160772,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.DOMCrossSiteScriptingVerifier.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",55,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/DOMCrossSiteScriptingVerifier.java
160773,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.VulnerableComponentsLesson.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",53,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/vulnerable-components/src/main/java/org/owasp/webgoat/plugin/VulnerableComponentsLesson.java
160774,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.ClientSideFilteringFreeAssignment.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",27,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/client-side-filtering/src/main/java/org/owasp/webgoat/plugin/ClientSideFilteringFreeAssignment.java
160776,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.advanced.SqlInjectionChallenge.USERS_TABLE_NAME"" is not a constant literal.",49,"Perform the following to guard against SQL table name injection attacks with JDBC.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
160777,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.JWTVotesEndpoint.resetVotes"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",137,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTVotesEndpoint.java
160778,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.IDOREditOtherProfiile.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",50,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/idor/src/main/java/org/owasp/webgoat/plugin/IDOREditOtherProfiile.java
160779,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",78,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionLesson6b.java
160780,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.Flag.postFlag"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",58,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/Flag.java
160781,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.IDORViewOtherProfile.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",58,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/idor/src/main/java/org/owasp/webgoat/plugin/IDORViewOtherProfile.java
160782,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.JWTFinalEndpoint.resetVotes"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",66,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTFinalEndpoint.java
160783,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",97,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
160784,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.challenge6.Assignment6.registerNewUser"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",43,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
160785,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.challenge5.challenge6.Assignment5.USERS_TABLE_NAME"" is not a constant literal.",72,"Perform the following to guard against SQL table name injection attacks with JDBC.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
160786,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.MissingFunctionACYourHash.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",24,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/MissingFunctionACYourHash.java
160787,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.IDORDiffAttributes.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",51,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/idor/src/main/java/org/owasp/webgoat/plugin/IDORDiffAttributes.java
160788,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""data[i]"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Statement.executeUpdate(java.lang.String)"" may allow an attacker to inject SQL.",972,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
160789,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.BypassRestrictionsFieldRestrictions.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",53,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/bypass-restrictions/src/main/java/org/owasp/webgoat/plugin/BypassRestrictionsFieldRestrictions.java
160790,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.ResetLinkAssignment.login"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",42,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/plugin/ResetLinkAssignment.java
160791,RESOURCE_LEAK,Resource leaks,Resource leak,High,Moderate,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",115,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
160792,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CrossSiteScriptingLesson6a.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",56,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/CrossSiteScriptingLesson6a.java
160793,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.challenge6.Assignment6.USERS_TABLE_NAME"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Connection.prepareStatement(java.lang.String)"" may allow an attacker to inject SQL.",57,"Perform the following to guard against SQL table name injection attacks with JDBC prepared statements.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
160794,CSRF,High impact security,Cross-site request forgery,High,Moderate,9.89,"""org.owasp.webgoat.plugin.DOMCrossSiteScripting.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",52,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/DOMCrossSiteScripting.java
160795,SQLI,High impact security,SQL injection,High,Moderate,9.58,"Insecure concatenation of a SQL statement. The value ""username_reg"" is tainted.",49,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"username_reg"""")"".
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
160796,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.challenge5.challenge6.Assignment5.USERS_TABLE_NAME"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Connection.prepareStatement(java.lang.String)"" may allow an attacker to inject SQL.",49,"Perform the following to guard against SQL table name injection attacks with JDBC prepared statements.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
160797,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.advanced.SqlInjectionChallenge.registerNewUser"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",41,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
160798,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Variable ""statement"" going out of scope leaks the resource it refers to.",119,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
160799,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.SimpleXXE.createNewComment"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",67,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/SimpleXXE.java
160800,UNSAFE_DESERIALIZATION,High impact security,Unsafe deserialization,High,Unspecified,6.3,"A tainted value ""new java.io.ByteArrayInputStream(data)"" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code.",67,"If possible, use pure data formats such as JSON or XML to serialize and deserialize untrusted data.  Otherwise, if you must use native serialization methods, check the integrity of the data (for example with HMAC) before deserializing it.",502,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/insecure-deserialization/src/main/java/org/owasp/webgoat/plugin/InsecureDeserializationTask.java
160801,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.BlindSendFileAssignment.addComment"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",74,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/BlindSendFileAssignment.java
160802,CSRF,High impact security,Cross-site request forgery,High,Major,9.89,"""org.owasp.webgoat.plugin.SimpleMailAssignment.login"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",37,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/plugin/SimpleMailAssignment.java
160803,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.challenge5.challenge6.Assignment5.USERS_TABLE_NAME"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Statement.execute(java.lang.String)"" may allow an attacker to inject SQL.",62,"Perform the following to guard against SQL table name injection attacks with JDBC.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
160804,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Major,9.58,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.challenge6.Assignment6.USERS_TABLE_NAME"" is not a constant literal.",116,"Perform the following to guard against SQL table name injection attacks with JDBC.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
160805,CSRF,High impact security,Cross-site request forgery,High,Major,9.89,"""org.owasp.webgoat.plugin.HttpBasicsLesson.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",54,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/http-basics/src/main/java/org/owasp/webgoat/plugin/HttpBasicsLesson.java
160806,CSRF,High impact security,Cross-site request forgery,High,Major,9.89,"""org.owasp.webgoat.plugin.VerifyAccount.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",40,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/auth-bypass/src/main/java/org/owasp/webgoat/plugin/VerifyAccount.java
160808,INSECURE_COOKIE,Audit impact security,Cookie without the 'Secure' attribute,Audit,Unspecified,0.0,Sending an insecure cookie with the response.,83,"Ensure that the cookie has the ""Secure"" attribute set by calling ""setSecure(true)"" method for the cookie object.",614,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTVotesEndpoint.java
160809,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.HttpBasicsInterceptRequest.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",51,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/http-proxies/src/main/java/org/owasp/webgoat/plugin/HttpBasicsInterceptRequest.java
160810,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.MissingFunctionACHiddenMenus.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",38,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/MissingFunctionACHiddenMenus.java
160811,NULL_RETURNS,Null pointer dereferences,Dereference null return value,Medium,Major,7.39,"Calling a method on null object ""findNodeByTitle(nodes, ""Admin lost password"")"".",129,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",476,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/test/java/org/owasp/webgoat/plugin/JWTVotesEndpointTest.java
160812,FORWARD_NULL,Null pointer dereferences,Explicit null dereferenced,Medium,Unspecified,7.39,"Calling a method on null object ""statement"".",84,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",476,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
160813,FORWARD_NULL,Null pointer dereferences,Explicit null dereferenced,Medium,Unspecified,7.39,"Calling a method on null object ""statement"".",121,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",476,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
160814,CSRF,High impact security,Cross-site request forgery,High,Moderate,9.89,"""org.owasp.webgoat.plugin.HttpBasicsQuiz.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",50,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/http-basics/src/main/java/org/owasp/webgoat/plugin/HttpBasicsQuiz.java
204812,UNENCRYPTED_SENSITIVE_DATA,Medium impact security,Cleartext sensitive data in a database,Medium,Unspecified,9.89,"""<storage from new>.User(username, password, getAuthorities())"" uses ""password"" as a password which indicates that ""password"" contains sensitive data. ""password"" comes from a database and it was never decrypted which suggests that it was stored unencrypted.",50,Encrypt the sensitive data before storing it in a database.,313,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/users/WebGoatUser.java
204817,PATH_MANIPULATION,Audit impact security,"Filesystem path, filename, or URI manipulation",Audit,Unspecified,9.89,"Constructing a path or URI using the tainted value ""webgoatHome"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",73,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/WebGoat.java
204821,HIBERNATE_BAD_HASHCODE,API usage errors,Unsafe dependence on database key,Medium,Unspecified,9.89,"Result depends on ""org.owasp.webgoat.lessons.Assignment.getId()"", which is a Hibernate identifier.",39,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",1023,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/lessons/Assignment.java
204836,HIBERNATE_BAD_HASHCODE,API usage errors,Unsafe dependence on database key,Medium,Unspecified,9.89,"Result depends on ""org.owasp.webgoat.lessons.Assignment.getId()"", which is a Hibernate identifier.",39,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",1023,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/lessons/Assignment.java
204849,LOG_INJECTION,Audit impact security,Log injection,Audit,Unspecified,9.89,"A tainted string ""new java.io.File(destinationDir, myFile.getOriginalFilename())"" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed.",48,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,117,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/FileServer.java
204869,CSRF,Medium impact security,Cross-site request forgery,Medium,Unspecified,9.89,"""org.owasp.webwolf.FileServer.getFiles"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",68,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/FileServer.java
204871,UNENCRYPTED_SENSITIVE_DATA,Medium impact security,Cleartext sensitive data in a database,Medium,Unspecified,9.89,"""<storage from new>.User(username, password, getAuthorities())"" uses ""password"" as a password which indicates that ""password"" contains sensitive data. ""password"" comes from a database and it was never decrypted which suggests that it was stored unencrypted.",43,Encrypt the sensitive data before storing it in a database.,313,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/user/WebGoatUser.java
204873,URL_MANIPULATION,Audit impact security,URL manipulation,Audit,Unspecified,9.89,"Constructing a URL using the tainted value ""loginFormUrl"". This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.",48,"URL manipulation vulnerabilities can be addressed by proper input validation. Whitelisting the allowed scheme and authority, and blacklisting characters that allow unsafe path traversal in the path and query parts of the URL can improve security.",99,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/AjaxAuthenticationEntryPoint.java
204899,LOG_INJECTION,Audit impact security,Log injection,Audit,Unspecified,9.89,"A tainted string ""request.getRequestURL()"" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed.",21,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,117,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/requests/LandingPage.java
204905,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.89,"Constructing a path or URI using the tainted value ""fileLocatation"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",36,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/MvcConfiguration.java
228810,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.89,"Variable ""statement"" going out of scope leaks the resource it refers to.",44,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson9.java
228811,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CrossSiteScriptingLesson3.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",21,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/CrossSiteScriptingLesson3.java
228812,SENSITIVE_DATA_LEAK,Medium impact security,Cleartext sensitive data in a database,Medium,Unspecified,9.89,"Leaking a password ""password_login"". Passing it to ""java.sql.PreparedStatement.setString"" either stores it to a database or suggests that it is stored in a database.",38,"Do one of the following before storing it:
* Encrypt the data.
* Use a cryptographic hash on the data.
",313,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallengeLogin.java
228813,LOG_INJECTION,Audit impact security,Log injection,Audit,Unspecified,9.89,"A tainted string ""logLine"" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed.",60,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,117,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/Ping.java
228814,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.89,"Variable ""statement"" going out of scope leaks the resource it refers to.",112,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson8.java
228815,XML_INJECTION,Audit impact security,XML injection,Audit,Unspecified,9.89,"A tainted value ""inputSource"" is passed to an XML Parsing API.",69,The user-controllable data should be sanitized so that it does not contain unexpected content or structure.,91,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/client-side-filtering/src/main/java/org/owasp/webgoat/plugin/Salaries.java
228816,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.89,"Variable ""statement"" going out of scope leaks the resource it refers to.",71,The user-controllable data should be sanitized so that it does not contain unexpected content or structure.,404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson9.java
228817,SENSITIVE_DATA_LEAK,Medium impact security,Cleartext sensitive data in a database,Medium,Unspecified,9.89,"Leaking a password ""password_login"". Passing it to ""java.sql.PreparedStatement.setString"" either stores it to a database or suggests that it is stored in a database.",86,"Do one of the following before storing it:
* Encrypt the data.
* Use a cryptographic hash on the data.
",313,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
228818,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CIAQuiz.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",26,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cia/src/main/java/org/owasp/webgoat/plugin/CIAQuiz.java
228819,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson2.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",55,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson2.java
228820,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.advanced.SqlInjectionQuiz.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",32,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionQuiz.java
228821,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.SSRFTask1.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",63,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/ssrf/src/main/java/org/owasp/webgoat/plugin/SSRFTask1.java
228822,CSRF,High impact security,Cross-site request forgery,High,Moderate,9.89,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson8.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",25,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson8.java
228823,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson9.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",23,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson9.java
228824,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson10.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",23,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson10.java
228825,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.89,"Variable ""statement"" going out of scope leaks the resource it refers to.",1041,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/CreateDB.java
228826,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CrossSiteScriptingLesson5a.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",58,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/CrossSiteScriptingLesson5a.java
228827,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.mitigation.SqlInjectionLesson10a.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",30,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/SqlInjectionLesson10a.java
228828,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson3.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",55,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson3.java
228829,SQLI,High impact security,SQL injection,High,Unspecified,9.89,"Insecure concatenation of a SQL statement. The value ""auth_tan"" is tainted.",31,"Perform one of the following to guard against SQL injection attacks.
* Parameterize the SQL statement binding tainted values to parameters within the statement.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
* Use an ORM such as Hibernate/JPA ""Criteria"" to build the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson8.java
228830,SQLI,High impact security,SQL injection,High,Unspecified,9.89,"Passing the tainted value ""_query"" to the SQL API ""java.sql.Statement.executeUpdate(java.lang.String)"" may allow an attacker to inject SQL.",69,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson3.java
228831,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.SecurityQuestionAssignment.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",46,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/plugin/SecurityQuestionAssignment.java
228832,UNSAFE_DESERIALIZATION,High impact security,Unsafe deserialization,High,Unspecified,9.89,"A tainted value ""comment"" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code.",111,"If possible, use pure data formats such as JSON or XML to serialize and deserialize untrusted data.  Otherwise, if you must use native serialization methods, check the integrity of the data (for example with HMAC) before deserializing it.",502,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/StoredXssComments.java
228833,SENSITIVE_DATA_LEAK,Medium impact security,Cleartext sensitive data in a database,Medium,Unspecified,9.89,"Leaking a password ""password_reg"". Passing it to ""java.sql.PreparedStatement.setString"" either stores it to a database or suggests that it is stored in a database.",59,"Do one of the following before storing it:
* Encrypt the data.
* Use a cryptographic hash on the data.
",313,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
228834,INSECURE_RANDOM,Insecure random category,Cryptographically weak PRNG,Low,Unspecified,9.89,"The random value ""org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(16)"" was generated using a cryptographically insecure pseudo-random number generator.",31,"Use a cryptographically secure PRNG implementation such as ""java.security.SecureRandom"".",330,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java
228835,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.89,"SQL string ""_query"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Statement.executeUpdate(java.lang.String)"" may allow an attacker to inject SQL.",69,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson4.java
228836,CONFIG.SPRING_SECURITY_CSRF_PROTECTION_DISABLED,Medium impact security,Disabled Spring Security CSRF protection,Medium,Unspecified,9.89,The Spring Security CSRF protection is disabled.,62,"Enable the Spring Security CSRF protection by omitting the invocation of ""disable()"".",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/WebSecurityConfig.java
228837,INSECURE_RANDOM,Insecure random category,Cryptographically weak PRNG,Low,Unspecified,9.89,"The random value ""org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(20)"" was generated using a cryptographically insecure pseudo-random number generator.",60,"Use a cryptographically secure PRNG implementation such as ""java.security.SecureRandom"".",330,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTRefreshEndpoint.java
228838,UNSAFE_DESERIALIZATION,High impact security,Unsafe deserialization,High,Unspecified,9.89,"A tainted value ""comment"" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code.",79,"If possible, use pure data formats such as JSON or XML to serialize and deserialize untrusted data.  Otherwise, if you must use native serialization methods, check the integrity of the data (for example with HMAC) before deserializing it.",502,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/Comments.java
228839,INSECURE_RANDOM,Insecure random category,Cryptographically weak PRNG,Low,Unspecified,9.89,"The random value ""org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(10)"" was generated using a cryptographically insecure pseudo-random number generator.",56,"Use a cryptographically secure PRNG implementation such as ""java.security.SecureRandom"".",330,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/BlindSendFileAssignment.java
228840,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.NetworkLesson.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",27,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/chrome-dev-tools/src/main/java/org/owasp/webgoat/plugin/NetworkLesson.java
228841,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson4.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",55,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson4.java
228842,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.NetworkDummy.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",24,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/chrome-dev-tools/src/main/java/org/owasp/webgoat/plugin/NetworkDummy.java
228843,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.89,"Variable ""statement"" going out of scope leaks the resource it refers to.",51,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson8.java
228844,LOG_INJECTION,Audit impact security,Log injection,Audit,Unspecified,9.89,"A tainted string ""resourceName"" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed.",85,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,117,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/AsciiDoctorTemplateResolver.java
228845,SQLI,High impact security,SQL injection,High,Unspecified,9.89,"Passing the tainted value ""_query"" to the SQL API ""java.sql.Statement.executeUpdate(java.lang.String)"" may allow an attacker to inject SQL.",69,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson4.java
228846,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.SecurePasswordsAssignment.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",34,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/secure-passwords/src/main/java/org/owasp/webgoat/plugin/SecurePasswordsAssignment.java
228847,INSECURE_RANDOM,Insecure random category,Cryptographically weak PRNG,Low,Unspecified,9.89,"The random value ""org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(16)"" was generated using a cryptographically insecure pseudo-random number generator.",32,"Use a cryptographically secure PRNG implementation such as ""java.security.SecureRandom"".",330,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
228848,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.89,"Constructing a path or URI using the tainted value ""fileLocatation"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",45,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/FileServer.java
228849,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.89,"Constructing a path or URI using the tainted value ""new java.io.File(destinationDir, user.getUsername() + ""_changed"")"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",49,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/FileServer.java
228850,CSRF,Medium impact security,Cross-site request forgery,Medium,Unspecified,9.89,"""org.owasp.webwolf.FileServer.importFile"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",43,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/FileServer.java
228851,URL_MANIPULATION,Medium impact security,URL manipulation,Medium,Unspecified,9.89,"Constructing a URL using the tainted value ""java.lang.String.format(""http://%s/PasswordReset/reset/reset-password/%s"", host, resetLink)"". This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.",79,"URL manipulation vulnerabilities can be addressed by proper input validation. Whitelisting the allowed scheme and authority, and blacklisting characters that allow unsafe path traversal in the path and query parts of the URL can improve security.",99,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/plugin/ResetLinkAssignmentForgotPassword.java
228852,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.89,"Constructing a path or URI using the tainted value ""new java.io.File(targetDirectory, ""secret.txt"")"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",69,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/BlindSendFileAssignment.java
228853,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.89,"Variable ""statement"" going out of scope leaks the resource it refers to.",77,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson2.java
228854,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.89,"Insecure concatenation of a SQL statement. The value ""org.owasp.webgoat.plugin.advanced.SqlInjectionChallenge.USERS_TABLE_NAME"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Connection.prepareStatement(java.lang.String)"" may allow an attacker to inject SQL.",36,"Perform the following to guard against SQL table name injection attacks with JDBC prepared statements.
* Define constant string values for the table or column names.
* Validate user-supplied parameters against these constant values.
* If valid, concatenate these constant values to the SQL statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallengeLogin.java
228855,XML_INJECTION,Audit impact security,XML injection,Audit,Unspecified,9.89,"A tainted value ""new java.io.StringReader(xml)"" is passed to an XML Parsing API.",70,The user-controllable data should be sanitized so that it does not contain unexpected content or structure.,91,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/Comments.java
228856,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson5a.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",56,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson5a.java
228857,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.SSRFTask2.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",63,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/ssrf/src/main/java/org/owasp/webgoat/plugin/SSRFTask2.java
228858,LOG_INJECTION,Audit impact security,Log injection,Audit,Unspecified,9.89,"A tainted string ""args"" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed.",42,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,117,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-server/src/main/java/org/owasp/webgoat/StartWebGoat.java
228859,RESOURCE_LEAK,Exceptional resource leaks,Resource leak on an exceptional path,Low,Unspecified,9.89,"Variable ""in"" going out of scope leaks the resource it refers to.",77,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/ssrf/src/main/java/org/owasp/webgoat/plugin/SSRFTask2.java
228860,SQLI,High impact security,SQL injection,High,Unspecified,9.89,"Insecure concatenation of a SQL statement. The value ""name"" is tainted.",29,"Perform the following to guard against SQL injection attacks.
* Parameterize the SQL statement.
* Bind the tainted value to the parameter.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson9.java
228861,XSS,High impact security,Cross-site scripting,High,Unspecified,9.89,"Printing ""this.guesses"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",52,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(this)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cia/src/main/java/org/owasp/webgoat/plugin/CIAQuiz.java
228862,URL_MANIPULATION,Medium impact security,URL manipulation,Medium,Unspecified,9.89,"Constructing a URL using the tainted value ""url"". This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.",114,"URL manipulation vulnerabilities can be addressed by proper input validation. Whitelisting the allowed scheme and authority, and blacklisting characters that allow unsafe path traversal in the path and query parts of the URL can improve security.",99,A7-Cross-Site Scripting (XSS),/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/DatabaseUtilities.java
228863,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.89,"""org.owasp.webgoat.plugin.CrossSiteScriptingLesson4.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",26,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A7-Cross-Site Scripting (XSS),/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/CrossSiteScriptingLesson4.java
228864,PATH_MANIPULATION,Audit impact security,"Filesystem path, filename, or URI manipulation",Audit,Unspecified,9.89,"Constructing a path or URI using the tainted value ""directory + ""/data/webgoat"""". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",35,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-server/src/main/java/org/owasp/webgoat/HSQLDBDatabaseConfig.java
228865,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.89,"Variable ""statement"" going out of scope leaks the resource it refers to.",79,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson3.java
228866,INSECURE_COMMUNICATION,Medium impact security,Plaintext communication,Medium,Unspecified,9.89,Communicating over an insecure channel.,73,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",319,A3-Sensitive Data Exposure,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/ssrf/src/main/java/org/owasp/webgoat/plugin/SSRFTask2.java
228867,SQLI,High impact security,SQL injection,High,Unspecified,9.89,"Passing the tainted value ""_query"" to the SQL API ""java.sql.Statement.executeQuery(java.lang.String)"" may allow an attacker to inject SQL.",67,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson2.java
228868,LOG_INJECTION,Audit impact security,Log injection,Audit,Unspecified,9.89,"A tainted string ""lang"" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed.",85,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,117,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/service/LabelService.java
228869,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Unspecified,9.89,"A tainted string ""regex"" is used to construct a regular expression.  This may allow for an attacker to retrieve sensitive information or alter the behavior of the program.",103,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/SqlInjectionLesson10b.java
228870,SQLI,High impact security,SQL injection,High,Unspecified,9.89,"Insecure concatenation of a SQL statement. The value ""accountName"" is tainted.",62,"Perform the following to guard against SQL data value injection attacks with JDBC prepared statements.
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"accountName"""")"".
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson5b.java
228871,UNSAFE_DESERIALIZATION,High impact security,Unsafe deserialization,High,Unspecified,9.89,"A tainted value ""feedback.getBytes()"" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code.",41,"If possible, use pure data formats such as JSON or XML to serialize and deserialize untrusted data.  Otherwise, if you must use native serialization methods, check the integrity of the data (for example with HMAC) before deserializing it.",502,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/csrf/src/main/java/org/owasp/webgoat/plugin/CSRFFeedback.java
228872,INSECURE_RANDOM,Insecure random category,Cryptographically weak PRNG,Low,Unspecified,9.89,"The random value ""org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(16)"" was generated using a cryptographically insecure pseudo-random number generator.",30,"Use a cryptographically secure PRNG implementation such as ""java.security.SecureRandom"".",330,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallenge.java
228873,URL_MANIPULATION,Medium impact security,URL manipulation,Medium,Unspecified,9.89,"Constructing a URL using the tainted value ""webWolfMailURL"". This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.",74,"URL manipulation vulnerabilities can be addressed by proper input validation. Whitelisting the allowed scheme and authority, and blacklisting characters that allow unsafe path traversal in the path and query parts of the URL can improve security.",99,A8-Insecure Deserialization,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge7/Assignment7.java
228874,MISSING_AUTHZ,Medium impact security,Missing authorization check,Medium,Unspecified,9.89,"The action ""org.owasp.webgoat.session.DatabaseUtilities.getConnection(webSession)"" is not protected by the authorization check ""@org.owasp.webgoat.assignments.AssignmentPath"" (as is done elsewhere 16 out of 20 times).",45,"URL manipulation vulnerabilities can be addressed by proper input validation. Whitelisting the allowed scheme and authority, and blacklisting characters that allow unsafe path traversal in the path and query parts of the URL can improve security.",285,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/Servers.java
228875,CONFIG.SPRING_SECURITY_CSRF_PROTECTION_DISABLED,Medium impact security,Disabled Spring Security CSRF protection,Medium,Unspecified,9.89,The Spring Security CSRF protection is disabled.,73,"Enable the Spring Security CSRF protection by omitting the invocation of ""disable()"".",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/WebSecurityConfig.java
228876,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""kid"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Statement.executeQuery(java.lang.String)"" may allow an attacker to inject SQL.",78,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"kid"""")"".
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTFinalEndpoint.java
228877,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.58,"Variable ""query"" going out of scope leaks the resource it refers to.",92,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"kid"""")"".
",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson5b.java
228878,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.58,"""org.owasp.webgoat.plugin.advanced.SqlInjectionChallengeLogin.login"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",31,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallengeLogin.java
228879,XSS,High impact security,Cross-site scripting,High,Unspecified,9.58,"Printing ""this.guesses"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",58,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(this)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionQuiz.java
228880,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""time"" is not a constant literal.",107,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"time"""")"".
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson8.java
228881,XSS,High impact security,Cross-site scripting,High,Unspecified,9.58,"Printing ""this.guesses"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",47,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(this)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/CrossSiteScriptingQuiz.java
228882,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.58,"""org.owasp.webgoat.plugin.CrossSiteScriptingQuiz.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",21,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A7-Cross-Site Scripting (XSS),/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/cross-site-scripting/src/main/java/org/owasp/webgoat/plugin/CrossSiteScriptingQuiz.java
228883,SQLI,High impact security,SQL injection,High,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""action"" is tainted.",29,"Perform the following to guard against SQL LIKE string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Use the Coverity sanitizer ""Escape.sqlLikeClause()"" on ""action"". It escapes sensitive characters in a SQL ""LIKE"" clause.
* Modify the statement to use the"" {escape '@'} ""sequence after the ""LIKE"" clause. The @ symbol is now an escape character.
* Bind the SQL ""LIKE"" escaped ""action"" as a parameter value surrounded with % or _ characters as needed. Use the ""PreparedStatement.setString"" method to bind the value to the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson10.java
228884,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"SQL string ""_query"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Statement.executeQuery(java.lang.String)"" may allow an attacker to inject SQL.",67,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson2.java
228885,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.58,"Variable ""check_statement"" going out of scope leaks the resource it refers to.",76,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson4.java
228886,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Unspecified,9.58,"SQL string ""_query"" is not a constant literal. Passing the tainted command to the SQL API ""java.sql.Statement.executeUpdate(java.lang.String)"" may allow an attacker to inject SQL.",69,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson3.java
228887,MISSING_AUTHZ,Medium impact security,Missing authorization check,Medium,Unspecified,9.58,"The action ""org.owasp.webgoat.session.DatabaseUtilities.getConnection(getWebSession())"" is not protected by the authorization check ""@org.owasp.webgoat.assignments.AssignmentPath"" (as is done elsewhere 16 out of 20 times).",29,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",285,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java
228888,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.58,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson5.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",55,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson5.java
228889,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.58,"""org.owasp.webgoat.plugin.mitigation.SqlInjectionLesson10b.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",27,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/mitigation/SqlInjectionLesson10b.java
228890,SQLI,High impact security,SQL injection,High,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""name"" is tainted.",31,"Perform the following to guard against SQL injection attacks.
* Parameterize the SQL statement.
* Bind the tainted value to the parameter.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson8.java
228891,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.58,"Variable ""stmt"" going out of scope leaks the resource it refers to.",69,"Perform the following to guard against SQL injection attacks.
* Parameterize the SQL statement.
* Bind the tainted value to the parameter.
",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson10.java
228892,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.58,"Variable ""statement"" going out of scope leaks the resource it refers to.",41,"Perform the following to guard against SQL injection attacks.
* Parameterize the SQL statement.
* Bind the tainted value to the parameter.
",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson10.java
228893,USELESS_CALL,Incorrect expression,Useless call,Medium,Unspecified,9.58,"Calling ""a.getHints()"" is only useful for its return value, which is ignored.",63,"Perform the following to guard against SQL injection attacks.
* Parameterize the SQL statement.
* Bind the tainted value to the parameter.
",404,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/service/HintService.java
228894,SENSITIVE_DATA_LEAK,Medium impact security,Cleartext sensitive data in a database,Medium,Unspecified,9.58,"Leaking a password ""password_reg"". Passing it to ""java.sql.PreparedStatement.setString"" either stores it to a database or suggests that it is stored in a database.",60,"Do one of the following before storing it:
* Encrypt the data.
* Use a cryptographic hash on the data.
",313,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge6/Assignment6.java
228895,SQLI,High impact security,SQL injection,High,Unspecified,9.58,"Insecure concatenation of a SQL statement. The value ""auth_tan"" is tainted.",29,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson9.java
228896,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.58,"Constructing a path or URI using the tainted value ""fileLocatation"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",71,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webwolf/src/main/java/org/owasp/webwolf/FileServer.java
228897,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.58,"Variable ""statement"" going out of scope leaks the resource it refers to.",42,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/advanced/SqlInjectionChallengeLogin.java
228898,URL_MANIPULATION,Medium impact security,URL manipulation,Medium,Unspecified,9.58,"Constructing a URL using the tainted value ""url"". This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.",126,"URL manipulation vulnerabilities can be addressed by proper input validation. Whitelisting the allowed scheme and authority, and blacklisting characters that allow unsafe path traversal in the path and query parts of the URL can improve security.",99,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-container/src/main/java/org/owasp/webgoat/session/DatabaseUtilities.java
228899,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Unspecified,9.58,"Constructing a path or URI using the tainted value ""webGoatHomeDirectory"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",61,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/xxe/src/main/java/org/owasp/webgoat/plugin/Ping.java
228900,CSRF,High impact security,Cross-site request forgery,High,Unspecified,9.58,"""org.owasp.webgoat.plugin.introduction.SqlInjectionLesson5b.completed"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",56,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson5b.java
228901,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,9.58,"Variable ""statement"" going out of scope leaks the resource it refers to.",94,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/plugin/introduction/SqlInjectionLesson5b.java
228902,RESOURCE_LEAK,Resource leaks,Resource leak,High,Unspecified,5.35,"Failing to save or close resource created by ""connection.createStatement()"" leaks it.",78,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",404,A5-Broken Access Control,/Users/bian/Downloads/WebGoat-8.0.0-2.M25/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/plugin/JWTFinalEndpoint.java
