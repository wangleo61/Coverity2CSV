CID,Checker,Category,Type,Impact,Severity,CVSS score,Event Description,Vulnerable line number,Defect remediation guidance,CWE,OWASP,FilePathname
10188,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Critical,9.89,"Constructing a path or URI using the tainted value ""url + name"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",29,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/facade/StorageFacadeImpl.java
10189,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Critical,9.58,"Insecure concatenation of a SQL statement. The value ""round"" is not a constant literal.",41,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"round"""")"".
",89,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/CreditAccountImpl.java
10190,WEAK_GUARD,Low impact security,Comparison of principal name to a constant,Low,High,7.67,"Checking unreliable, spoofable data from a principal name, ""username.equalsIgnoreCase(""john"")"", against a constant suggests that a spoofable value guards execution of this conditional.",58,"Use a stronger mechanism to make authorization decisions, such as one based on users having roles or permissions that are checked before performing sensitive operations.",290,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/security/CustomAuthenticationProvider.java
10191,XSS,High impact security,Cross-site scripting,High,Critical,9.89,"Concatenating ""file.getOriginalFilename()"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",147,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(file)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10192,RESOURCE_LEAK,Exceptional resource leaks,Resource leak on an exceptional path,Low,Medium,5.35,"Failing to save or close resource created by ""new java.io.FileInputStream(tmpFile)"" leaks it.",128,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(file)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",404,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10193,RESOURCE_LEAK,Exceptional resource leaks,Resource leak on an exceptional path,Low,Medium,5.35,"Variable ""fos"" going out of scope leaks the resource it refers to.",122,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(file)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",404,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10194,SQLI,High impact security,SQL injection,High,Critical,9.58,"Insecure concatenation of a SQL statement. The value ""username"" is tainted.",40,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"username"""")"".
",89,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/AccountDaoImpl.java
10195,CSRF,High impact security,Cross-site request forgery,High,Critical,9.89,"""org.hdivsamples.controllers.TransferController.transferCheck"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",123,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/TransferController.java
10196,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Critical,9.89,"Constructing a path or URI using the tainted value ""url + fileName"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",18,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/facade/StorageFacadeImpl.java
10197,SQLI,High impact security,SQL injection,High,Critical,9.58,"Insecure concatenation of a SQL statement. The value ""number"" is tainted.",20,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"number"""")"".
",89,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/ActivityDaoImpl.java
10198,CSRF,Medium impact security,Cross-site request forgery,Medium,Critical,9.89,"""org.hdivsamples.controllers.DashboardController.getMaliciousCertificate"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",151,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10199,SQLI,Audit impact security,SQL injection,Audit,Critical,9.58,"Insecure concatenation of a SQL statement. The value ""username"" is tainted.",22,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"username"""")"".
",89,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/CashAccountImpl.java
10200,SQLI,Audit impact security,SQL injection,Audit,Critical,9.58,"Insecure concatenation of a SQL statement. The value ""username"" is tainted.",21,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"username"""")"".
",89,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/AccountDaoImpl.java
10201,RESOURCE_LEAK,Exceptional resource leaks,Resource leak on an exceptional path,Low,Medium,5.35,"Failing to save or close resource created by ""new java.io.FileInputStream(file)"" leaks it.",84,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"username"""")"".
",404,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10202,SQL_NOT_CONSTANT,Audit impact security,Non-constant SQL,Audit,Critical,9.58,"Insecure concatenation of a SQL statement. The value ""cashAccountId"" is not a constant literal.",41,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/CreditAccountImpl.java
10203,PATH_MANIPULATION,High impact security,"Filesystem path, filename, or URI manipulation",High,Critical,9.89,"Constructing a path or URI using the tainted value ""url + fileName"". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.",24,"Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal.",22,A5-Broken Access Control,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/facade/StorageFacadeImpl.java
10204,UNSAFE_DESERIALIZATION,High impact security,Unsafe deserialization,High,Medium,6.3,"A tainted value ""file.getInputStream()"" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code.",143,"If possible, use pure data formats such as JSON or XML to serialize and deserialize untrusted data.  Otherwise, if you must use native serialization methods, check the integrity of the data (for example with HMAC) before deserializing it.",502,A8-Insecure Deserialization,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10205,SENSITIVE_DATA_LEAK,Medium impact security,Cleartext sensitive data in a database,Medium,Medium,6.43,"Leaking an authentication token, ""str"". Passing it to ""org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.RowMapper)"" either stores it to a database or suggests that it is stored in a database.",35,"Do one of the following before storing it:
- Encrypt the data.
- Use a cryptographic hash on the data.",313,A8-Insecure Deserialization,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/AccountDaoImpl.java
10206,SQLI,Audit impact security,SQL injection,Audit,Critical,9.58,"Insecure concatenation of a SQL statement. The value ""password"" is tainted.",21,"Perform one of the following to guard against SQL injection attack with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"". Parameterize the SQL statement using ""?"" positional characters. Bind the tainted values to the ""?"" positional parameters using one of the ""PreparedStatement.set*"" methods.
* Validate user-supplied values against predefined constant values. Concatenate these constant values into the SQL statement.
* Cast tainted values to safe types such as integers. Concatenate these type safe values into the statement.
",89,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/AccountDaoImpl.java
10207,SENSITIVE_DATA_LEAK,Medium impact security,Cleartext sensitive data in a database,Medium,Medium,6.43,"Leaking a password, ""str"". Passing it to ""org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.RowMapper)"" either stores it to a database or suggests that it is stored in a database.",35,"Do one of the following before storing it:
- Encrypt the data.
- Use a cryptographic hash on the data.",313,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/AccountDaoImpl.java
10208,CSRF,Medium impact security,Cross-site request forgery,Medium,Critical,9.89,"""org.hdivsamples.controllers.DashboardController.getCertificate"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",112,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10209,XSS,High impact security,Cross-site scripting,High,Critical,9.89,"Printing ""buf"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",187,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(buf)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10210,RESOURCE_LEAK,Exceptional resource leaks,Resource leak on an exceptional path,Low,Medium,5.35,"Variable ""fos"" going out of scope leaks the resource it refers to.",163,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(buf)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",404,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10211,NULL_RETURNS,Null pointer dereferences,Dereference null return value,Medium,High,7.39,"Calling a method on null object ""this.getClass().getClassLoader().getResource("""")"".",14,"Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.

For example: ""Escape.html(buf)""


* Use the ""Escape.html"" function from the Coverity Sanitizers Library. This escapes the output for HTML.

",476,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/facade/StorageFacadeImpl.java
10212,CSRF,High impact security,Cross-site request forgery,High,Critical,9.89,"""org.hdivsamples.controllers.TransferController.transfer"" is a web-app entry point that requires protection from cross-site request forgery (CSRF).",65,"Protection against CSRF attacks involves several steps.

1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.
2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.
3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain.",352,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/TransferController.java
10213,SQLI,Audit impact security,SQL injection,Audit,Critical,9.58,"Insecure concatenation of a SQL statement. The value ""username"" is tainted.",21,"Perform one of the following to guard against SQL string injection attacks with JDBC.
* Refactor the JDBC code to use the ""PreparedStatement"" API instead of ""Statement"".
* Add a positional parameter to the SQL statement using ""?"".
* Bind the tainted value to the parameter using the ""setString"" method: ""PreparedStatement.setString(1, """"username"""")"".
",89,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/dao/CreditAccountImpl.java
10214,LOG_INJECTION,Audit impact security,Log injection,Audit,High,7.39,"A tainted string """"Showing info for credit card:"" + number"" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed.",88,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,117,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/ActivityController.java
10215,RESOURCE_LEAK,Exceptional resource leaks,Resource leak on an exceptional path,Low,Medium,5.35,"Failing to save or close resource created by ""new java.io.FileInputStream(tmpFile)"" leaks it.",170,Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,404,A1-Injection,/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/controllers/DashboardController.java
10614,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setTimeout"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",202,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A1-Injection,/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/bootstrap/bootstrap.js
10755,INSECURE_RANDOM,Low impact security,Cryptographically weak PRNG,Low,None,0.0,"Calling ""Math.random"" creates an insecure random value.",1476,"Use a cryptographically secure PRNG implementation such as ""crypto.RandomBytes()"" to generate random values for security-sensitive contexts.",330,A1-Injection,/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/bootstrap/bootstrap.js
11010,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setInterval"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",326,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/bootstrap/bootstrap.js
11172,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setTimeout"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",2021,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/bootstrap/bootstrap.js
11614,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setTimeout"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",202,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/bootstrap/bootstrap.js
11697,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setTimeout"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",2021,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/bootstrap/bootstrap.js
11928,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setInterval"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",326,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/bootstrap/bootstrap.js
11959,XSS,High impact security,Cross-site scripting,High,Critical,9.89,"Adding ""${account.name}"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",114,"Perform the following escaping in the following order to guard against cross-site scripting attacks with EL.

For example: ""fn:escapeXml(account.name)""


* Use the EL function ""fn:escapeXml"". This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/WEB-INF/jsp/userDetail.jsp
11960,XSS,High impact security,Cross-site scripting,High,Critical,9.89,"Adding ""${transferbean.description}"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",107,"Perform the following escaping in the following order to guard against cross-site scripting attacks with EL.

For example: ""fn:escapeXml(transferbean.description)""


* Use the EL function ""fn:escapeXml"". This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/WEB-INF/jsp/transferCheck.jsp
11961,XSS,High impact security,Cross-site scripting,High,Critical,9.89,"Adding ""${account.username}"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",112,"Perform the following escaping in the following order to guard against cross-site scripting attacks with EL.

For example: ""fn:escapeXml(account.username)""


* Use the EL function ""fn:escapeXml"". This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/WEB-INF/jsp/userDetail.jsp
11962,XSS,High impact security,Cross-site scripting,High,Critical,9.89,"Adding ""${account.surname}"" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.",116,"Perform the following escaping in the following order to guard against cross-site scripting attacks with EL.

For example: ""fn:escapeXml(account.surname)""


* Use the EL function ""fn:escapeXml"". This escapes the output for HTML.

",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/WEB-INF/jsp/userDetail.jsp
11963,CONSTANT_EXPRESSION_RESULT,Incorrect expression,Misuse of typeof,Medium,Medium,4.25,"""typeof message !== ""String"""" is always ""true"" except in JavaScript implementations that add """"String"""" to the standard set of possible values for ""typeof"".",620,"Did you intend to compare to """"string""""?",569,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/dropzone/dropzone.js
11964,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""Function"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",687,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/bootstrap-editable/bootstrap-editable.js
11965,NULL_RETURNS,Null pointer dereferences,Dereference null return value,Medium,High,7.39,"Calling a method on null object ""org.springframework.web.context.request.RequestContextHolder.getRequestAttributes()"".",34,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",476,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/java/org/hdivsamples/security/CustomAuthenticationProvider.java
11966,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",5853,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/bootstrap-editable/bootstrap-editable.js
11967,MISSING_BREAK,Control flow issues,Missing break in switch,Medium,None,0.0,"The case for value """"\\"""" is not terminated by a 'break' statement.",1198,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,484,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
11968,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setTimeout"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",190,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
11969,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",478,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
11970,LOCALSTORAGE_MANIPULATION,Audit impact security,localStorage manipulation,Audit,High,7.39,"Calling ""ls.setItem"" with the tainted value in argument 1. Using untrusted data as a key in ""localStorage"".  An attacker may be able to change the behavior of the application by introducing new keys or overwriting data at a sensitive key.",219,"Consider whether it is necessary to allow the user any control over this key.  If so, ensure that the value cannot interfere with other keys that your application uses for example, by ensuring that the user-specified key has a specific prefix or is one of a fixed set of constant strings (whitelisting).",99,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
11971,DOM_XSS,High impact security,DOM-based cross-site scripting,High,Critical,9.89,"Calling ""$("".logo img"").attr"" with the tainted value in argument 2. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",90,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-common.js
11972,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""$(""<li>"", {""class"" : classes.sPageButton + "" "" + btnClass, ""aria-controls"" : settings.sTableId, ""tabindex"" : settings.iTabIndex, ""id"" : ((idx === 0) && (typeof button === ""string"")) ? settings.sTableId + ""_"" + button : null}).append($(""<a>"", {""href"" : ""#""}).html(btnDisplay)).appendTo"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",87,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/datatable/dataTables.bootstrap.js
11973,INSECURE_RANDOM,Low impact security,Cryptographically weak PRNG,Low,None,0.0,"Calling ""Math.random"" creates an insecure random value.",46,"Use a cryptographically secure PRNG implementation such as ""crypto.RandomBytes()"" to generate random values for security-sensitive contexts.",330,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/parsley-validation/parsley.js
11974,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setTimeout"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",833,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
11975,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setTimeout"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",890,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
11976,FORWARD_NULL,Null pointer dereferences,Bad use of null-like value,Medium,High,7.39,"Accessing a property of null-like value ""oDTSettings"".",471,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",476,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/datatable/exts/dataTables.colReorder.js
11977,FORWARD_NULL,Null pointer dereferences,Bad use of null-like value,Medium,High,7.39,"Accessing a property of null-like value ""last_li"".",577,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",476,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
11978,CONSTANT_EXPRESSION_RESULT,Incorrect expression,Misuse of typeof,Medium,Medium,4.25,"""typeof start == ""numeric"""" is always ""false"" except in JavaScript implementations that add """"numeric"""" to the standard set of possible values for ""typeof"".",517,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",569,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/bootstrap-markdown.js
11979,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setTimeout"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",82,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
11980,LOCALSTORAGE_WRITE,Audit impact security,localStorage write,Audit,None,0.0,"Writing to ""localStorage"".",428,"Audit the data entering""localStorage"" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions.",922,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
11981,URL_MANIPULATION,Audit impact security,URL manipulation,Audit,High,7.39,"Calling ""$.getJSON"" with the tainted value in argument 1. Constructing a URL using a tainted value. This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.",422,"URL manipulation vulnerabilities can be addressed by proper input validation. Whitelisting the allowed scheme and authority, and blacklisting characters that allow unsafe path traversal in the path and query parts of the URL can improve security.",99,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
11982,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setTimeout"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",836,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
11983,NULL_RETURNS,Null pointer dereferences,Bad use of null-like value,Medium,High,7.39,"Accessing a property of null-like value ""attrs"".",737,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,476,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
11984,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""$(this).html"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",653,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-elements.js
11985,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",17,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/parsley-validation/parsley.js
11986,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setTimeout"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",833,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
11987,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",63,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/datatable/exts/dataTables.tableTools.js
11988,NO_EFFECT,Incorrect expression,Expression with no effect,Medium,None,0.0,"Accessing data with ""this.element"" and discarding the result. What was this code intended to accomplish?",290,Perhaps this code is incomplete or mistyped in some way.,398,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/bootstrap-slider/bootstrap-slider.js
11989,DEADCODE,Control flow issues,Logically dead code,Medium,None,0.0,"Execution cannot reach the expression ""m >= minDate.month()"" inside this statement: ""if ((!inMinYear || (m >= mi..."".",692,Perhaps this code is incomplete or mistyped in some way.,561,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/daterangepicker/daterangepicker.js
11990,NO_EFFECT,Incorrect expression,Expression with no effect,Medium,None,0.0,"Reading variable ""this"" and discarding the result. What was this code intended to accomplish?",66,Perhaps this code is incomplete or mistyped in some way.,398,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/bootstrap-tour/bootstrap-tour.js
11991,NULL_RETURNS,Null pointer dereferences,Bad use of null-like value,Medium,High,7.39,"Accessing a property of null-like value ""attrs"".",1647,Perhaps this code is incomplete or mistyped in some way.,476,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
11992,LOCALSTORAGE_WRITE,Audit impact security,localStorage write,Audit,None,0.0,"Writing to ""localStorage"".",674,"Audit the data entering""localStorage"" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions.",922,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-elements.js
11993,COPY_PASTE_ERROR,Incorrect expression,Copy-paste error,Medium,None,0.0,"""href"" in ""ref.href"" looks like a copy-paste error.",1654,"Should it say ""src"" instead?",398,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
11994,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""choiceContainer.append"" with the tainted value in any argument. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",900,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-charts.js
11995,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""$"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",110,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/datatable/dataTables.bootstrap.js
11996,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",950,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
11997,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setTimeout"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",82,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
11998,CONSTANT_EXPRESSION_RESULT,Incorrect expression,Misuse of typeof,Medium,Medium,4.25,"""typeof end == ""numeric"""" is always ""false"" except in JavaScript implementations that add """"numeric"""" to the standard set of possible values for ""typeof"".",517,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,569,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/bootstrap-markdown.js
11999,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",436,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
12000,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Writing the tainted value to property ""innerHTML"" of ""n"". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",2236,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/datatable/exts/dataTables.tableTools.js
12001,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",778,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
12002,CONSTANT_EXPRESSION_RESULT,Incorrect expression,Misuse of typeof,Medium,Medium,4.25,"""undefined === typeof this.catalog[locale]"" is always ""false"" because ""typeof"" operations always evaluate to a non-empty string, not ""undefined"".",952,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,569,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/parsley-validation/parsley.js
12003,LOCALSTORAGE_WRITE,Audit impact security,localStorage write,Audit,None,0.0,"Writing to ""localStorage"".",109,"Audit the data entering""localStorage"" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions.",922,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-common.js
12004,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""$"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",148,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/datatable/dataTables.bootstrap.js
12005,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setTimeout"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",566,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
12006,DEADCODE,Control flow issues,Logically dead code,Medium,None,0.0,"Execution cannot reach this statement: ""if (item.children) {
  item..."".",2786,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",561,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/bootstrap-editable/bootstrap-editable.js
12007,LOCALSTORAGE_WRITE,Audit impact security,localStorage write,Audit,None,0.0,"Writing to ""localStorage"".",128,"Audit the data entering""localStorage"" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions.",922,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-common.js
12008,DEADCODE,Control flow issues,Logically dead code,Medium,None,0.0,"Execution cannot reach this statement: ""alert(""Warning: TableTools ..."".",465,"Audit the data entering""localStorage"" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions.",561,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/datatable/exts/dataTables.tableTools.js
12009,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",103,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/to-markdown.js
12010,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setTimeout"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",890,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
12011,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""setTimeout"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",566,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
12012,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setTimeout"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",190,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
12013,UNREACHABLE,Control flow issues,Structurally dead code,Medium,None,0.0,"This code cannot be reached: ""if (((e != null) ? ((_ref =..."".",1104,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",561,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/dropzone/dropzone.js
12014,INSECURE_RANDOM,Low impact security,Cryptographically weak PRNG,Low,None,0.0,"Calling ""Math.random"" creates an insecure random value.",192,"Use a cryptographically secure PRNG implementation such as ""crypto.RandomBytes()"" to generate random values for security-sensitive contexts.",330,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-elements.js
12015,NULL_RETURNS,Null pointer dereferences,Bad use of null-like value,Medium,High,7.39,"Accessing a property of null-like value ""suggestion"".",1015,"Use a cryptographically secure PRNG implementation such as ""crypto.RandomBytes()"" to generate random values for security-sensitive contexts.",476,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
12016,DOM_XSS,High impact security,DOM-based cross-site scripting,High,Critical,9.89,"Calling ""$(""head"").append"" with the tainted value in any argument. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",86,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-common.js
12017,DEADCODE,Control flow issues,Logically dead code,Medium,None,0.0,"Execution cannot reach the expression ""m <= maxDate.month()"" inside this statement: ""if ((!inMinYear || (m >= mi..."".",692,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",561,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/daterangepicker/daterangepicker.js
12018,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",684,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/moment/moment.js
12019,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Writing the tainted value to property ""innerHTML"" of ""div"". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",1694,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/dropzone/dropzone.js
12020,URL_MANIPULATION,Audit impact security,URL manipulation,Audit,High,7.39,"Calling ""$.ajax"" with the tainted value in argument 1. Constructing a URL using a tainted value. This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.",332,"URL manipulation vulnerabilities can be addressed by proper input validation. Whitelisting the allowed scheme and authority, and blacklisting characters that allow unsafe path traversal in the path and query parts of the URL can improve security.",99,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
12021,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""$"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",72,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-common.js
12022,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""$(""#reportrange span"").html"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",157,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-elements.js
12023,SCRIPT_CODE_INJECTION,Audit impact security,Script code injection,Audit,High,7.39,"Calling ""Function"" with the tainted value in argument 1. This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.",694,User-controllable dynamic data should not be used as part of scripts that are executed on the server.,95,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/bootstrap-editable/bootstrap-editable.js
12024,INSECURE_RANDOM,Low impact security,Cryptographically weak PRNG,Low,None,0.0,"Calling ""Math.random"" creates an insecure random value.",1074,"Use a cryptographically secure PRNG implementation such as ""crypto.RandomBytes()"" to generate random values for security-sensitive contexts.",330,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/queen-charts.js
12025,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Calling ""setTimeout"" with the tainted value in argument 1. This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",836,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/jqallrangesliders/jQAllRangeSliders.js
12026,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",1335,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/markdown/markdown.js
12027,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",66,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/datatable/exts/dataTables.tableTools.js
12028,DOM_XSS,Audit impact security,DOM-based cross-site scripting,Audit,Critical,9.89,"Writing the tainted value to property ""innerHTML"" of ""elBuilder"". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.",829,"The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the ""javascript:"" or ""data:"" schemes. Any of these can lead to a DOM XSS vulnerability.
* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.
* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.
* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: ""data:text/html;,<img/src/onerror=alert(1)>"".
",79,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
12029,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",201,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/typeahead/typeahead.js
12030,COPY_PASTE_ERROR,Incorrect expression,Copy-paste error,Medium,None,0.0,"""key"" in ""newObj[key]"" looks like a copy-paste error.",726,"Should it say ""keyLower"" instead?",398,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/bootstrap-editable/bootstrap-editable.js
12031,DEADCODE,Control flow issues,Logically dead code,Medium,None,0.0,"Execution cannot reach the expression """""""" inside this statement: ""this.opts.element.val((!val..."".",2498,"Should it say ""keyLower"" instead?",561,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/select2/select2.js
12032,REGEX_INJECTION,Audit impact security,Regular expression injection,Audit,Medium,6.3,"Calling ""RegExp"" with the tainted value in argument 1. This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.",1037,Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations.,94,A7-Cross-Site Scripting (XSS),/home/leo/SIG/insecure-bank/src/main/webapp/resources/js/plugins/parsley-validation/parsley.js
